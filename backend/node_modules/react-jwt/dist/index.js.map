{"version":3,"file":"index.js","sources":["../src/jwt/index.ts","../src/hooks/index.tsx"],"sourcesContent":["/**\n * Try to decode a JWT. If the token is valid you'll get an object otherwise you'll get null\n * @param token - The JWT that you want to decode\n * @returns Decoded token\n */\nexport function decodeToken<T>(token: string): T | null;\nexport function decodeToken(token: string): Object | null;\nexport function decodeToken<T = Object>(token: string): T | null {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    // payload ( index 1 ) has the data stored and\n    // data about the expiration time\n    const payload: string = token.split(\".\")[1];\n    // determine the padding characters required for the base64 string\n    const padding: string = \"=\".repeat((4 - (payload.length % 4)) % 4);\n    // convert the base64url string to a base64 string\n    const base64: string =\n      payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    // parse base64 into json\n    const jsonPayload = decodeURIComponent(\n      window.atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n    );\n    // decode json\n    const decoded = JSON.parse(jsonPayload);\n\n    return decoded;\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\n/**\n * Verify if the token is expired or not\n * @param token - Your JWT\n * @returns boolean\n */\nexport function isTokenExpired(token: string): boolean {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\n/**\n * This function will help you to decode a JWT and know if it's expired or not\n * @param userJwt - Your JWT\n * @returns An object containing the properties isExpired, decodedToken and reEvaluateToken\n */\nexport function useJwt<T>(userJwt: string): IUseJwt<T>;\nexport function useJwt(userJwt: string): IUseJwt;\nexport function useJwt<T>(userJwt: string): IUseJwt<T> {\n  const [isExpired, setIsExpired] = useState<boolean>(false);\n  const [decodedToken, setDecodedToken] = useState<T | null>(null);\n\n  useEffect(() => {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  const evaluateToken = (token: string) => {\n    setDecodedToken(decodeToken<T>(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return { isExpired, decodedToken, reEvaluateToken: evaluateToken };\n}\n\ninterface IUseJwt<T = Object> {\n  isExpired: boolean;\n  decodedToken: T | null;\n  reEvaluateToken: (token: string) => void;\n}\n\n"],"names":["decodeToken","token","split","length","payload","padding","repeat","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","decoded","JSON","parse","error","isTokenExpired","decodedToken","result","exp","expirationDate","Date","setUTCSeconds","valueOf","useJwt","userJwt","useState","isExpired","setIsExpired","setDecodedToken","useEffect","evaluateToken","reEvaluateToken"],"mappings":";;SAOgBA,YAAwBC;EACtC,IAAI;IAGF,IAAIA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,MAAjB,KAA4B,CAA5B,IAAiC,OAAOF,KAAP,KAAiB,QAAtD,EAAgE;MAC9D,OAAO,IAAP;;;IAKF,IAAMG,OAAO,GAAWH,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAxB;IAEA,IAAMG,OAAO,GAAW,IAAIC,MAAJ,CAAW,CAAC,IAAKF,OAAO,CAACD,MAAR,GAAiB,CAAvB,IAA6B,CAAxC,CAAxB;IAEA,IAAMI,MAAM,GACVH,OAAO,CAACI,OAAR,CAAgB,GAAhB,EAAqB,GAArB,EAA0BA,OAA1B,CAAkC,GAAlC,EAAuC,GAAvC,IAA8CH,OADhD;IAGA,IAAMI,WAAW,GAAGC,kBAAkB,CACpCC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EACKL,KADL,CACW,EADX,EAEKW,GAFL,CAES,UAAAC,CAAC;MAAA,OAAI,MAAM,CAAC,OAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAR,EAAsCC,KAAtC,CAA4C,CAAC,CAA7C,CAAV;KAFV,EAGKC,IAHL,CAGU,EAHV,CADoC,CAAtC;IAOA,IAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWZ,WAAX,CAAhB;IAEA,OAAOU,OAAP;GAzBF,CA0BE,OAAOG,KAAP,EAAc;IAEd,OAAO,IAAP;;AAEH;SAOeC,eAAetB;EAC7B,IAAMuB,YAAY,GAAQxB,WAAW,CAACC,KAAD,CAArC;EACA,IAAIwB,MAAM,GAAY,IAAtB;;EAEA,IAAID,YAAY,IAAIA,YAAY,CAACE,GAAjC,EAAsC;IACpC,IAAMC,cAAc,GAAS,IAAIC,IAAJ,CAAS,CAAT,CAA7B;IACAD,cAAc,CAACE,aAAf,CAA6BL,YAAY,CAACE,GAA1C;IAEAD,MAAM,GAAGE,cAAc,CAACG,OAAf,KAA2B,IAAIF,IAAJ,GAAWE,OAAX,EAApC;;;EAGF,OAAOL,MAAP;AACD;;SC/CeM,OAAUC;EACxB,gBAAkCC,cAAQ,CAAU,KAAV,CAA1C;MAAOC,SAAP;MAAkBC,YAAlB;;EACA,iBAAwCF,cAAQ,CAAW,IAAX,CAAhD;MAAOT,YAAP;MAAqBY,eAArB;;EAEAC,eAAS,CAAC;IACRC,aAAa,CAACN,OAAD,CAAb;GADO,EAEN,CAACA,OAAD,CAFM,CAAT;;EAIA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACrC,KAAD;IACpBmC,eAAe,CAACpC,WAAW,CAAIC,KAAJ,CAAZ,CAAf;IACAkC,YAAY,CAACZ,cAAc,CAACtB,KAAD,CAAf,CAAZ;GAFF;;EAKA,OAAO;IAAEiC,SAAS,EAATA,SAAF;IAAaV,YAAY,EAAZA,YAAb;IAA2Be,eAAe,EAAED;GAAnD;AACD;;;;;;"}